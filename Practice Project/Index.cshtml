@model IEnumerable<JqueryDataTable.Models.Student>

@{
    ViewData["Title"] = "Index";
}

<h1>Student</h1>
<div class="content-wrapper">
    <table class="table table-striped table-bordered" id="student_dataTable" style="width:100%">
    </table>

</div> 

  
    <script>
    $.ajax({
        url: 'Student/GetStudent',
        type: 'GET',
        dataType: 'json',
        
     
        success: function (response) {
            //console.log(JSON.stringify(response));
            var Mycolumns = new Array();
            var TableHeader = "<thead class='bg-gradient-lightblue'><tr>";
            var footer = "<tfoot><tr>"
            for (var key in response[0]) {
                var myObj = new Object();
                myObj.data = key;
                Mycolumns.push(myObj);
                TableHeader += "<th>" + key + "</th>"
                footer += "<th></th>"
            }

            TableHeader += "</thead></tr>";
            footer += "</tfoot></tr>";


            $("#student_dataTable").append(TableHeader);
            $("#student_dataTable").append(footer);
            var numberRenderer = $('#student_dataTable').dataTable.render.number(',', '.', 2,).display;
            $('#student_dataTable').DataTable({

                columns: Mycolumns,
                data: response,

                "autoWidth": true,
                "responsive": true,
                "aaSorting": [],
                aLengthMenu: [
                    [25, 50, 100, 200, -1],
                    [25, 50, 100, 200, "All"]
                ],

                iDisplayLength: 50,
            @*    order: [[2, 'asc']],
                "rowGroup": {
                    startRender: null,
                    dataSrc: 'department',
                    endRender: function (rows, group) {
                        var intVal = function (i) {
                            return typeof i === 'string' ?
                                i.replace(/[\$,]/g, '') * 1 :
                                typeof i === 'number' ?
                                    i : 0;
                        };
                        var sum1 = rows
                            .data()
                            .pluck('marks1')
                        
                            .reduce(function (a, b) {
                                return intVal(a) + intVal(b);
                            }, 0);
                        var sum2 = rows
                            .data()
                            .pluck('marks2')

                            .reduce(function (a, b) {
                                return intVal(a) + intVal(b);
                            }, 0);

                        var sum3 = rows
                            .data()
                            .pluck('marks3')

                            .reduce(function (a, b) {
                                return intVal(a) + intVal(b);
                            }, 0);


                        rowGroupsum = $.fn.dataTable.render.number(',', '.', 0, '$').display(sum1);
                        rowGroupsum1 = $.fn.dataTable.render.number(',', '.', 0, '$').display(sum2);
                        rowGroupsum2 = $.fn.dataTable.render.number(',', '.', 0, '$').display(sum3);

                        return $('<tr/>')
                            .append('<td colspan="3"> sum of ' + group + '</td>').append('<td>' + rowGroupsum + '</td>' + '<td>' + rowGroupsum1 + '</td>' + '<td>' + rowGroupsum2 + '</td>');
                    },
                },*@


                rowGroup: {
                    startRender: null,
                    endRender: function (rows, group, level) {
                        var api = rows;
                      
                        var container = $('<tr/>');
                        container.append('<td colspan= "3"> ' + group + '</td>');
                        var j;
                        var intVal = function (i) {
                            return typeof i === 'string' ?
                                i.replace(/[\%£,]/g, '') * 1 :
                                typeof i === 'number' ?
                                    i : 0;
                        };

                        for (j = 3; j < api.columns().header().length; j++) {

                            var RowGroupSum = rows
                                .data()
                                .pluck(j == 3 ? 'marks1' : j == 4 ? 'marks2' : j==5 ? 'marks3' : j )
                                .reduce(function (a, b) {
                                    return intVal(a) + intVal(b);
                                }, 0);

                            container.append('<td>' + RowGroupSum + '</td>');
                        }

                        return $(container)

                    },
                    dataSrc: 'department'
                },



                //dom: 'Blfrtip',
                dom: 'lBfrtip',

                "footerCallback": function (row, data, start, end, display, rows, group) {

         
                    var api = this.api(), data;
                    var intVal = function (i) {
                        return typeof i === 'string' ?
                            i.replace(/[\$,]/g, '') * 1 :
                            typeof i === 'number' ?
                                i : 0;
                    };

                    api.columns().every(function () {
                        var column = this;
                        var Counter = 0;

                        sum = column
                            .data({ search: 'applied' })
                            .reduce(function (a, b) {
                                Counter++;
                                return intVal(a) + intVal(b);
                            }, 0).toFixed(2);

                        pagesum = api.column(column, { page: 'current' })
                            .data({ search: 'applied' })
                            .reduce(function (a, b) {
                                return intVal(a) + intVal(b);
                            }, 0).toFixed(2);
                        Average = sum / Counter;


                        $(api.column(0).footer()).html('<b>PageTotal:<hr>Total:<hr>Average:</b>');
                        if (!isNaN(sum) && !isNaN(pagesum)) {
                            $(column.footer()).html(
                                '<b>' + numberRenderer(pagesum) + '<hr>' + numberRenderer(sum) + '<hr>' + numberRenderer(Average) + '</b>'
                            );
                        }
                        else {
                            $(column.footer()).html('<b></b>');
                        }
                    });

                },

            });

        },
    });
    </script>

